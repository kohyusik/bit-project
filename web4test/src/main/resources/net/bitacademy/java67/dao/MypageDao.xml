<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.bitacademy.java67.dao.MypageDao">
  
  <resultMap type="PresentationVo" id="PresentationVoMap">
    <id       column="pre_no"       property="preNo" />
    <result   column="user_no"      property="userNo" />
    <result   column="title"        property="title" />
    <result   column="author"       property="author" />
    <result   column="create_date"  property="createDate" />
    <result   column="public"       property="isPublic" />
    <result   column="content"      property="content" />
    <result   column="likes"        property="likes" />
  </resultMap>
  
  <resultMap type="java.util.HashMap" id="shareListMap">
    <id       column="pre_no"       property="preNo" />
    <result   column="user_no"      property="userNo" />
    <result   column="title"        property="title" />
    <result   column="author"       property="author" />
    <result   column="create_date"  property="createDate" />
    <result   column="public"       property="isPublic" />
    <result   column="likeperson"        property="likePerson" />
   <result   column="likepre_no"        property="likePre_no" />   
  </resultMap>
 
  
 
  <!-- 이메일 가지고 user_no 받아올 때 사용 이거는 따로 빼는게 나으려나 싶음 -->
   <select id="selectUser" parameterType="String" resultType="int">
      SELECT user_no
      FROM user
      WHERE userEmail=#{email}
  </select>
  <!-- 최근거 불러오는 부분 -->
  <select id="selectLatest" parameterType="int" resultMap="PresentationVoMap">
      SELECT pre_no, user_no, title, author, create_date, public, content
      FROM presentation
      WHERE user_no=#{no}
      ORDER BY pre_no DESC limit 1;
  </select>
  <!-- 전체 목록 불러오기  -->
  <select id="selectList" parameterType="int" resultMap="PresentationVoMap">
      SELECT pre_no, user_no, title, author, create_date, public, content 
      FROM presentation
      where user_no=#{userNo} 
  </select>
  
  <!-- 즐겨찾기 등록해둔 목록 불러오기 -->
    <select id="selectFavorite" parameterType="int" resultMap="PresentationVoMap">
      SELECT presentation.user_no, presentation.pre_no, presentation.title, presentation.author, presentation.create_date, presentation.content
      FROM presentation JOIN favorite 
      ON presentation.pre_no=favorite.pre_no
      Where favorite.user_no=#{userNo}   
  </select>
  
  <!--공개 설정한 목록 불러오기-->
  <select id="selectShareList" parameterType="map" resultMap="shareListMap">
    SELECT presentation.pre_no, presentation.user_no, presentation.title, presentation.author, 
    presentation.create_date, presentation.public, favorite.user_no as likeperson, favorite.pre_no likepre_no 
    FROM presentation  LEFT OUTER JOIN favorite 
    ON favorite.pre_no = presentation.pre_no WHERE presentation.public=#{publicYn};
  </select>
  
    
<update id="updateTitle" parameterType="map">
      UPDATE presentation SET 
        title=#{title}
      WHERE pre_no=#{preNo}
</update>
 
 <update id="updatePublic" parameterType="map">
      UPDATE presentation SET public=#{isPublic}
      WHERE pre_no=#{preNo}
</update> 

<insert id="insertFavorite" parameterType="map">
      insert into favorite(user_no, pre_no)  
      values(#{userNo}, #{preNo})
</insert>
  <!-- 여기서 쓸 유저번호 받기  -->

<delete id="deleteFavorite" parameterType="map">
      delete from favorite
      where user_no=#{userNo} and pre_no=#{preNo}
</delete>


</mapper>









